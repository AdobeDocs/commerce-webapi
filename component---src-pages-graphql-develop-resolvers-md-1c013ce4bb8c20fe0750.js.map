{"version":3,"file":"component---src-pages-graphql-develop-resolvers-md-1c013ce4bb8c20fe0750.js","mappings":"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","sources":["webpack://commerce-webapi/./src/pages/graphql/develop/resolvers.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-webapi/commerce-webapi/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"graphql-resolvers\"\n    }}>{`GraphQL resolvers`}</h1>\n    <p>{`A resolver performs GraphQL request processing. In general, it is responsible for constructing a query, fetching data and performing any calculations, then transforming the fetched and calculated data into a GraphQL array format. Finally, it returns the results wrapped by a callable function.`}</p>\n    <p>{`A GraphQL request is represented by the following arguments, which will be processed by a resolver:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Field`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$field`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Config/Element/Field.php\"\n            }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\GraphQl\\\\Config\\\\Element\\\\Field`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fields are used to describe possible values for a type/interface`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$context`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/Resolver/ContextInterface.php\"\n            }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\GraphQl\\\\Query\\\\Resolver\\\\ContextInterface`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Resolver context is used as a shared data extensible object in all resolvers that implement `}<a parentName=\"td\" {...{\n              \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/ResolverInterface.php\"\n            }}><inlineCode parentName=\"a\">{`ResolverInterface`}</inlineCode></a>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$info`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Schema/Type/ResolveInfo.php\"\n            }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\GraphQl\\\\Schema\\\\Type\\\\ResolveInfo`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Structure containing information useful for field resolution process.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Contains additional query parameters. `}<inlineCode parentName=\"td\">{`Null`}</inlineCode>{` in most cases.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`$args`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`array`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Contains input arguments of query.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`A GraphQL resolver must implement one of the following interfaces:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/Resolver/BatchResolverInterface.php\"\n          }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\GraphQl\\\\Query\\\\Resolver\\\\BatchResolverInterface`}</inlineCode></a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/Resolver/BatchServiceContractResolverInterface.php\"\n          }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\GraphQl\\\\Query\\\\Resolver\\\\BatchServiceContractResolverInterface`}</inlineCode></a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/ResolverInterface.php\"\n          }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\GraphQl\\\\Query\\\\ResolverInterface`}</inlineCode></a></p>\n      </li>\n    </ul>\n    <p>{`The first two interfaces provide a way to resolve multiple branches/leaves at once (known as batching), while the last one resolves one request at a time. We recommend using batch resolvers for queries because they improve performance by fetching information required to resolve multiple GraphQL requests with a single operation.`}</p>\n    <h2 {...{\n      \"id\": \"query-resolvers\"\n    }}>{`Query resolvers`}</h2>\n    <h3 {...{\n      \"id\": \"batchresolverinterface\"\n    }}>{`BatchResolverInterface`}</h3>\n    <p>{`Batch resolvers gather GraphQL requests for the same field until there is no way to process the tree further without resolving previous requests.`}</p>\n    <p>{`Consider the following example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query ($filter: ProductAttributeFilterInput!) {\n  products (filter: $filter) {\n    items {\n      id\n      sku\n      related_products {\n        sku\n        related_products {\n          sku\n        }\n      }\n    }\n    total_count\n  }\n}\n`}</code></pre>\n    <p>{`The query loads a list of products, the SKUs of their related products, and then any secondary related product SKUs.`}</p>\n    <p>{`Loading a list of related products individually for each product would be expensive performance-wise. With batch resolvers, you can load linked products for all products that were initially found, then group them by root products. After the `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` branch is resolved, a batch resolver for `}<inlineCode parentName=\"p\">{`related_products`}</inlineCode>{` will be called for the first product found. Instead of resolving the list right away, it will just add the first product to the list of products that require loading additional related products. After all the products from the `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` branch have been loaded, the lists of related products must be loaded. Then, `}<inlineCode parentName=\"p\">{`BatchResolverInterface::resolve()`}</inlineCode>{` executes with a gathered list of previous requests to `}<inlineCode parentName=\"p\">{`related_products`}</inlineCode>{` branches. At this point, the resolver is able to extract product DTOs from each GraphQL request, load all the product links, sort them by root products, and generate GraphQL values for each branch. After this is done, the same batching will take place when resolving child `}<inlineCode parentName=\"p\">{`related_products`}</inlineCode>{` branches.`}</p>\n    <p>{`The following pseudo-code shows a `}<inlineCode parentName=\"p\">{`related_products`}</inlineCode>{` branch resolver:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class RelatedProducts implements BatchResolverInterface\n{\n    ...\n\n    public function resolve(ContextInterface $context, Field $field, array $requests): BatchResponse\n    {\n        //Get the list of products we need to load related products for\n        $rootProductIds = array_map(function ($request) { return $request->getValue()['model']->getId(); }, $requests);\n\n        //Load the links\n        $productLinks = $this->service->getRelatedProductLinks($rootProductIds);\n\n        //Sort the links\n        $response = new BatchResponse();\n        foreach ($requests as $request) {\n            $response->addResponse($request, $productLinks[$request->getValue()['model']->getId()]);\n        }\n\n        return $response;\n    }\n}\n`}</code></pre>\n    <p>{`Each GraphQL request object must be assigned a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/Resolver/Value.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\GraphQl\\\\Query\\\\Resolver\\\\Value`}</inlineCode></a>{` result type or any type of data (mixed). This value takes in a callable function to its constructor that will be invoked at the latest possible time for the resolver to acquire its data. As a result, a list of items being resolved can be retrieved all at once by establishing a buffer that contains all relevant parent data to filter and fetch for the children list data.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/RelatedProductGraphQl/Model/Resolver/Batch/AbstractLikedProducts.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\RelatedProductGraphQl\\\\Model\\\\Resolver\\\\Batch\\\\AbstractLinkedProducts`}</inlineCode></a>{` contains an example of batch resolver implementation.`}</p>\n    <h3 {...{\n      \"id\": \"batchservicecontractresolverinterface\"\n    }}>{`BatchServiceContractResolverInterface`}</h3>\n    <p>{`Requests for this interface to resolve are gathered into batches in the same way as for `}<inlineCode parentName=\"p\">{`BatchResolverInterface`}</inlineCode>{`, except that the actual resolving is delegated to a batch service contract. The job of the `}<inlineCode parentName=\"p\">{`BatchServiceContractResolverInterface`}</inlineCode>{` resolver is to convert GraphQL requests into DTOs acceptable by the service contract, and then convert results returned by the contract into a GraphQL response.`}</p>\n    <p>{`Consider the same example query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query ($filter: ProductAttributeFilterInput!) {\n  products (filter: $filter) {\n    items {\n      id\n      sku\n      related_products {\n        sku\n        related_products {\n          sku\n        }\n      }\n    }\n    total_count\n  }\n}\n`}</code></pre>\n    <p>{`Here, we will delegate loading all related products to a service that accepts a list of root product IDs, and then returns individual lists for each.`}</p>\n    <p>{`Pseudo-code for a GraphQL resolver delegating the work to a service contract may look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class RelatedProductsResolver implements BatchServiceContractResolverInterface\n{\n    ...\n\n    public function getServiceContract(): array\n    {\n        return [ProductLinksRetriever::class, 'getRelatedProducts'];\n    }\n\n    public function convertToServiceArgument(ResolveRequestInterface $request)\n    {\n        return new RootProductCriteria($request->getValue()['model']->getId());\n    }\n\n    public function convertFromServiceResult($result, ResolveRequestInterface $request)\n    {\n        return $result->getLinkedProducts();\n    }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getServiceContract()`}</inlineCode>{` method points to the service contract to be used.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`convertToServiceArgument()`}</inlineCode>{` method converts GraphQL requests to a criteria item to be passed in a list as the argument to the contract. Remember that batch service contract methods must accept a single argument: a list (array) of criteria objects.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`convertFromServiceResult()`}</inlineCode>{` method converts one of the result items into a GraphQL response (a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/Resolver/Value.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\GraphQl\\\\Query\\\\Resolver\\\\Value`}</inlineCode></a>{` instance or an array). Remember that batch service contracts must return result items in the same order as were the criteria items passed as the method's list argument.`}</p>\n    <p>{`The batch service contract used in the example would look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ProductLinksRetriever\n{\n    ...\n\n    /**\n     * @param RootProductCriteria[] $criteriaList\n     * @return RelatedProductsFound[]\n     */\n    public function getRelatedProducts(array $criteriaList): array\n    {\n        ....\n    }\n}\n\nclass RootProductCriteria\n{\n    ....\n\n    public function __construct(int $rootProductId)\n    {\n        $this->productId = $rootProductId;\n    }\n\n    public function getRootProductId(): int\n    {\n        return $this->productId;\n    }\n}\n\nclass RelatedProductsFound\n{\n    ....\n\n    public function getLinkedProducts(): array\n    {\n        ....\n    }\n\n    public function getRootProductId(): int\n    {\n        ....\n    }\n}\n`}</code></pre>\n    <p>{`A real example can be found at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogGraphQl/Model/Resolver/Product/BatchProductLinks.php\"\n      }}>{`\\\\Magento\\\\CatalogGraphQl\\\\Model\\\\Resolver\\\\Product\\\\BatchProductLinks`}</a></p>\n    <h3 {...{\n      \"id\": \"resolverinterface\"\n    }}>{`ResolverInterface`}</h3>\n    <p>{`This interface resolves one branch or leaf at a time. It returns `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/Resolver/Value.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\GraphQl\\\\Query\\\\Resolver\\\\Value`}</inlineCode></a>{` or any type of data (mixed). This value takes in a callable function to its constructor that will be invoked at the latest possible time for the resolver to acquire its data. As a result, a list of items being resolved can be retrieved all at once by establishing a buffer that contains all relevant parent data to filter and fetch for the children list data.`}</p>\n    <p>{`You can view an example inside the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/BundleGraphQl/Model/Resolver/BundleItemLinks.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\BundleGraphQl\\\\Model\\\\Resolver\\\\BundleItemLinks`}</inlineCode></a>{` resolver. This resolver takes each bundle option ID and its corresponding parent product ID and stores them in a collection's filter buffer (in this case, using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/BundleGraphQl/Model/Resolver/Links/Collection.php#L62-L70\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\BundleGraphQl\\\\Model\\\\Resolver\\\\Links\\\\Collection::addIdFilters()`}</inlineCode></a>{` function). Each resolver then returns a callable that invokes this collection. The collection caches the result of all link entities it fetched for all the option_id/parent_id combinations. This fetch only needs to occur once for the whole `}<inlineCode parentName=\"p\">{`BundleItemLink`}</inlineCode>{` list, and each resulting callable that is invoked for every link in the list returns an item from the collections cached result.`}</p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Value`}</inlineCode>{` object wraps a callable object, and you can use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/GraphQl/Query/Resolver/ValueFactory.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\GraphQl\\\\Query\\\\Resolver\\\\ValueFactory`}</inlineCode></a>{` to create a value.`}</p>\n    <h2 {...{\n      \"id\": \"mutation-requirements\"\n    }}>{`Mutation requirements`}</h2>\n    <p>{`Like queries, mutations are also defined within the `}<inlineCode parentName=\"p\">{`<module_name>/etc/schema.graphqls`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"mutation-syntax\"\n    }}>{`Mutation syntax`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`type Mutation {\n    mutationQueryName(inputParamName: MutationQueryInputType, inputParamName2: MutationQueryInputType2, ...): MutationQueryOutput @resolver(class: \"Magento\\\\\\\\<module_name>\\\\\\\\Model\\\\\\\\Resolver\\\\\\\\MutationResolverModel\") @doc(description:\"Mutation query description\")\n}\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Syntax option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`mutationQueryName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of mutation`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`inputParamName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input parameters for the mutation (optional)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`MutationQueryInputType`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The type of input parameter, such as `}<inlineCode parentName=\"td\">{`String`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`Int`}</inlineCode>{`, or a custom type, like `}<inlineCode parentName=\"td\">{`MyCustomInput`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`MutationQueryOutput`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The mutation's result type, such as  `}<inlineCode parentName=\"td\">{`String`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`Int`}</inlineCode>{`, or a custom type, like `}<inlineCode parentName=\"td\">{`MyCustomOutput`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@resolver(class)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The class of the resolver`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@doc(description)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Describes the purpose of the mutation`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`@deprecated(reason: \"description\")`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use `}<inlineCode parentName=\"td\">{`@deprecated`}</inlineCode>{` to mark a query, mutation, or attribute as deprecated`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"resolver-class\"\n    }}>{`Resolver class`}</h3>\n    <p>{`Use the following sample code as a template for the GraphQL resolver mutation class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndeclare(strict_types=1);\n\nnamespace Magento\\\\<module_name>\\\\Model\\\\Resolver;\n\nuse Magento\\\\Framework\\\\GraphQl\\\\Config\\\\Element\\\\Field;\nuse Magento\\\\Framework\\\\GraphQl\\\\Query\\\\ResolverInterface;\nuse Magento\\\\Framework\\\\GraphQl\\\\Schema\\\\Type\\\\ResolveInfo;\n\n/**\n * @inheritdoc\n */\nclass MutationResolverModel implements ResolverInterface\n{\n    /**\n     * @inheritdoc\n     */\n    public function resolve(Field $field, $context, ResolveInfo $info, array $value = null, array $args = null)\n    {\n        // resolver functionality ...\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example usage`}</h3>\n    <p>{`The mutation query below creates an empty cart and returns a cart unique identifier`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`type Mutation {\n    createEmptyCart: String @resolver(class: \"\\\\\\\\Magento\\\\\\\\QuoteGraphQl\\\\\\\\Model\\\\\\\\Resolver\\\\\\\\CreateEmptyCart\") @doc(description:\"Creates an empty shopping cart for a guest or logged in user\")\n}\n`}</code></pre>\n    <p>{`Notice that a `}<inlineCode parentName=\"p\">{`MutationQueryInput`}</inlineCode>{` parameter is not specified here and `}<inlineCode parentName=\"p\">{`MutationQueryOutput`}</inlineCode>{` is defined as `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{` type.`}</p>\n    <p>{`The mutation to create a customer's account is more complex:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`type Mutation {\n    createCustomer (input: CustomerInput!): CustomerOutput @resolver(class: \"\\\\\\\\Magento\\\\\\\\CustomerGraphQl\\\\\\\\Model\\\\\\\\Resolver\\\\\\\\CreateCustomer\") @doc(description:\"Create customer account\")\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`!`}</inlineCode>{` character indicates `}<inlineCode parentName=\"p\">{`CustomerInput`}</inlineCode>{` is a required input parameter. `}<inlineCode parentName=\"p\">{`CustomerInput`}</inlineCode>{` is defined as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`input CustomerInput {\n    prefix: String @doc(description: \"An honorific, such as Dr., Mr., or Mrs.\")\n    firstname: String @doc(description: \"The customer's first name\")\n    middlename: String @doc(description: \"The customer's middle name\")\n    lastname: String @doc(description: \"The customer's family name\")\n    suffix: String @doc(description: \"A value such as Sr., Jr., or III\")\n    email: String @doc(description: \"The customer's email address. Required\")\n    date_of_birth: String @doc(description: \"The customer's date of birth.\")\n    taxvat: String @doc(description: \"The customer's Tax/VAT number (for corporate customers)\")\n    gender: Int @doc(description: \"The customer's gender(Male - 1, Female - 2)\")\n    password: String @doc(description: \"The customer's password\")\n    is_subscribed: Boolean @doc(description: \"Indicates whether the customer is subscribed to the company's newsletter\")\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`In keeping with current security and privacy best practices, be sure you are aware of any potential legal and security risks associated with the storage of customers' full date of birth (month, day, year) along with other personal identifiers, such as full name, before collecting or processing such data.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`createCustomer`}</inlineCode>{` mutation returns `}<inlineCode parentName=\"p\">{`CustomerOutput`}</inlineCode>{` object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`type CustomerOutput {\n    customer: Customer!\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`customer`}</inlineCode>{` parameter of the `}<inlineCode parentName=\"p\">{`CustomerOutput`}</inlineCode>{` object is a type of `}<inlineCode parentName=\"p\">{`Customer`}</inlineCode>{` object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`type Customer @doc(description: \"Customer defines the customer name and address and other details\") {\n    created_at: String @doc(description: \"Timestamp indicating when the account was created\")\n    prefix: String @doc(description: \"An honorific, such as Dr., Mr., or Mrs.\")\n    firstname: String @doc(description: \"The customer's first name\")\n    middlename: String @doc(description: \"The customer's middle name\")\n    lastname: String @doc(description: \"The customer's family name\")\n    suffix: String @doc(description: \"A value such as Sr., Jr., or III\")\n    email: String @doc(description: \"The customer's email address. Required\")\n    default_billing: String @doc(description: \"The ID assigned to the billing address\")\n    default_shipping: String @doc(description: \"The ID assigned to the shipping address\")\n    date_of_birth: String @doc(description: \"The customer's date of birth\")\n    taxvat: String @doc(description: \"The customer's Tax/VAT number (for corporate customers)\")\n    is_subscribed: Boolean @doc(description: \"Indicates whether the customer is subscribed to the company's newsletter\") @resolver(class: \"\\\\\\\\Magento\\\\\\\\CustomerGraphQl\\\\\\\\Model\\\\\\\\Resolver\\\\\\\\IsSubscribed\")\n    addresses: [CustomerAddress] @doc(description: \"An array containing the customer's shipping and billing addresses\")\n    gender: Int @doc(description: \"The customer's gender (Male - 1, Female - 2)\")\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`In keeping with current security and privacy best practices, be sure you are aware of any potential legal and security risks associated with the storage of customers' full date of birth (month, day, year) along with other personal identifiers, such as full name, before collecting or processing such data.`}</p>\n    <p>{`The following example shows the `}<inlineCode parentName=\"p\">{`createCustomer`}</inlineCode>{` mutation in action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`mutation {\n    createCustomer(\n        input: {\n            firstname: \"John\"\n            lastname: \"Doe\"\n            email: \"j.doe@example.com\"\n            password: \"1w2E3R456\"\n            is_subscribed: true\n        }\n    ) {\n        customer {\n            firstname\n            lastname\n            email\n            is_subscribed\n        }\n    }\n}\n`}</code></pre>\n    <p>{`A sample response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"createCustomer\": {\n      \"customer\": {\n        \"firstname\": \"John\",\n        \"lastname\": \"Doe\",\n        \"email\": \"j.doe@example.com\",\n        \"is_subscribed\": true\n      }\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}