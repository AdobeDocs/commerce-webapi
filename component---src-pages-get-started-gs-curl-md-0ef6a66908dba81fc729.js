"use strict";(self.webpackChunkcommerce_webapi=self.webpackChunkcommerce_webapi||[]).push([[7637],{7247:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return i},default:function(){return m}});var a=t(58168),r=t(80045),d=(t(88763),t(15680)),o=t(83407);const s=["components"],i={},l={_frontmatter:i},p=o.A;function m(e){let{components:n}=e,t=(0,r.A)(e,s);return(0,d.mdx)(p,(0,a.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"using-curl-to-run-requests"},"Using cURL to run requests"),(0,d.mdx)("p",null,(0,d.mdx)("a",{parentName:"p",href:"https://curl.haxx.se/"},"'cURL'")," is a command-line tool that lets you transmit HTTP requests and receive responses from the command line or a shell script. It is available for Linux distributions, Mac OS X, and Windows."),(0,d.mdx)("p",null,"To use cURL to run your REST web API call, use the cURL command syntax to construct the command."),(0,d.mdx)("p",null,"To create the endpoint in the call, append the REST URI that you constructed in ",(0,d.mdx)("a",{parentName:"p",href:"./gs-web-api-request.md"},"Construct a request")," to this URL:"),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"https://<HOST_OR_IP>/<BASE_INSTALL_DIR>/rest/")),(0,d.mdx)("p",null,"To pass the customer data object in the POST call payload, specify a JSON or XML request body on the call."),(0,d.mdx)("p",null,"For a complete list of cURL command options, see ",(0,d.mdx)("a",{parentName:"p",href:"http://curl.haxx.se/docs/manpage.html"},"curl.1 the man page"),"."),(0,d.mdx)("p",null,"The cURL examples in this guide use the following command-line options:"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-d")," ",(0,d.mdx)("inlineCode",{parentName:"td"},"-data")),(0,d.mdx)("td",{parentName:"tr",align:null},"Sends the specified data in a POST request to the HTTP server. Use this option to send a JSON or XML request body to the server.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-H")," ",(0,d.mdx)("inlineCode",{parentName:"td"},"-header")),(0,d.mdx)("td",{parentName:"tr",align:null},"Specifies an extra HTTP header in the request. Precede each header with the ",(0,d.mdx)("inlineCode",{parentName:"td"},"-H")," option. You can specify any number of extra headers. For a list of common headers used in web API requests, see ",(0,d.mdx)("a",{parentName:"td",href:"./gs-web-api-request.md#http-headers"},"HTTP headers"))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-i")," ",(0,d.mdx)("inlineCode",{parentName:"td"},"-input")),(0,d.mdx)("td",{parentName:"tr",align:null},"Includes the HTTP header in the output.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-s")," ",(0,d.mdx)("inlineCode",{parentName:"td"},"-silent")),(0,d.mdx)("td",{parentName:"tr",align:null},"Specifies silent or quiet mode, which makes cURL mute. Progress and error messages are suppressed.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-T")," ",(0,d.mdx)("inlineCode",{parentName:"td"},"-upload-file")),(0,d.mdx)("td",{parentName:"tr",align:null},"Transfers the specified local file to the remote URL.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-X")," ",(0,d.mdx)("inlineCode",{parentName:"td"},"-request")),(0,d.mdx)("td",{parentName:"tr",align:null},"Specifies the request method to use when communicating with the HTTP server. The specified request method is used instead of the default GET method.")))),(0,d.mdx)("h2",{id:"using-curl"},"Using cUrl"),(0,d.mdx)("p",null,"Adobe Commerce and Magento Open Source provide a service-wrapper for using cURL instead of using the default PHP cURL. The class ",(0,d.mdx)("inlineCode",{parentName:"p"},"Magento\\Framework\\HTTP\\Client\\Curl")," may be used to work with HTTP protocol using cURL library.\nFirst, create an instance of ",(0,d.mdx)("inlineCode",{parentName:"p"},"Magento\\Framework\\HTTP\\Client\\Curl"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},"/**\n* Constructor.\n*\n* @param Magento\\Framework\\HTTP\\Client\\Curl $curl\n*/\npublic function __construct(\n   Magento\\Framework\\HTTP\\Client\\Curl $curl\n) {\n   $this->curl = $curl;\n}\n")),(0,d.mdx)("h3",{id:"make-get-request-using-curl"},"Make GET request using cURL"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},"// get method\n$this->curl->get($url);\n\n// output of curl request\n$result = $this->curl->getBody();\n")),(0,d.mdx)("p",null,"where ",(0,d.mdx)("inlineCode",{parentName:"p"},"$url")," is the endpoint URL."),(0,d.mdx)("h3",{id:"make-post-request-using-curl"},"Make POST request using cURL"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},"// post method\n$this->curl->post($url, $params);\n\n// output of curl requestt\n$result = $this->curl->getBody();\n")),(0,d.mdx)("p",null,"where  ",(0,d.mdx)("inlineCode",{parentName:"p"},"$url")," is the endpoint URL, ",(0,d.mdx)("inlineCode",{parentName:"p"},"$params")," is an array of data that is being sent via the POST request. Other parameters may be added in the URL directly.\nA ",(0,d.mdx)("inlineCode",{parentName:"p"},"$params")," example:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},"$params = [\n  'user[email]' => $user->getEmail(),\n  'user[cellphone]' => $providerInfo['phone_number'],\n  'user[country_code]' => $providerInfo['country_code'],\n]\n")),(0,d.mdx)("p",null,"The cURL client can also add headers, basic authorization, additional cURL options, and cookies in the cURL request. The cURL client provides these methods before using ",(0,d.mdx)("inlineCode",{parentName:"p"},"get")," or ",(0,d.mdx)("inlineCode",{parentName:"p"},"post")," method."),(0,d.mdx)("h3",{id:"set-curl-header-using-addheader-method"},"Set cURL header using addHeader method"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"addHeader")," method accepts two parameters. The cURL header name and a cURL header value."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},'$this->curl->addHeader("Content-Type", "application/json");\n$this->curl->addHeader("Content-Length", 200);\n')),(0,d.mdx)("h3",{id:"set-curl-header-using-setheaders-method"},"Set cURL header using setHeaders method"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"setHeaders")," method accepts an array as a parameter."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},'$headers = ["Content-Type" => "application/json", "Content-Length" => "200"];\n$this->curl->setHeaders($headers);\n')),(0,d.mdx)("h3",{id:"set-basic-authorization-in-curl"},"Set basic authorization in cURL"),(0,d.mdx)("p",null,"Set the basic authorization using the ",(0,d.mdx)("inlineCode",{parentName:"p"},"setCredentials")," method."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},'$userName = "User_Name";\n$password = "User_Password";\n\n$this->curl->setCredentials($userName, $password);\n')),(0,d.mdx)("p",null,"It is equivalent to setting CURLOPT_HTTPHEADER value:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},'"Authorization : " . "Basic " . base64_encode($userName . ":" . $password)\n')),(0,d.mdx)("h3",{id:"set-curl-option-using-setoption-method"},"Set cURL option using setOption method"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"setOption")," method accepts two parameters. The cURL option name and the cURL option value."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},"$this->curl->setOption(CURLOPT_RETURNTRANSFER, true);\n$this->curl->setOption(CURLOPT_PORT, 8080);\n")),(0,d.mdx)("h3",{id:"set-curl-option-using-setoptions-method"},"Set cURL option using setOptions method"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"setOptions")," method accepts an array as a parameter."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},"$options = [CURLOPT_RETURNTRANSFER => true, CURLOPT_PORT => 8080];\n\n$this->curl->setOptions($options);\n")),(0,d.mdx)("h3",{id:"set-curl-cookies-using-addcookie-method"},"Set cURL cookies using addCookie method"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"addCookie")," method accepts an array as a parameter. The cookie name and the cookie value."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},'$this->curl->addCookie("cookie-name", "cookie-value");\n')),(0,d.mdx)("h3",{id:"set-curl-cookies-using-setcookies-method"},"Set cURL cookies using setCookies method"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"setCookies")," method accepts an array as a parameter."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},'$cookies = ["cookie-name-1" => "cookie-value-1", "cookie-name-2" => "cookie-value-2"];\n$this->curl->setCookies($cookies);\n')),(0,d.mdx)("h3",{id:"example-usage"},"Example usage"),(0,d.mdx)("p",null,"For example, the ",(0,d.mdx)("inlineCode",{parentName:"p"},"Magento\\Marketplace\\Model\\Partners")," class gets partners info using cURL from the API of Magento connect."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-php"},"namespace Magento\\Marketplace\\Model;\n\nuse Magento\\Framework\\HTTP\\Client\\Curl;\nuse Magento\\Marketplace\\Helper\\Cache;\nuse Magento\\Backend\\Model\\UrlInterface;\n\n/**\n * @api\n * @since 100.0.2\n */\nclass Partners\n{\n    /**\n     * @var Curl\n     */\n    protected $curlClient;\n\n    /**\n     * @var string\n     */\n    protected $urlPrefix = 'https://';\n\n    /**\n     * @var string\n     */\n    protected $apiUrl = 'magento.com/magento-connect/platinumpartners/list';\n\n    /**\n     * @var \\Magento\\Marketplace\\Helper\\Cache\n     */\n    protected $cache;\n\n    /**\n     * @var UrlInterface\n     */\n    private $backendUrl;\n\n    /**\n     * @param Curl $curl\n     * @param Cache $cache\n     * @param UrlInterface $backendUrl\n     */\n    public function __construct(Curl $curl, Cache $cache, UrlInterface $backendUrl)\n    {\n        $this->curlClient = $curl;\n        $this->cache = $cache;\n        $this->backendUrl = $backendUrl;\n    }\n\n    /**\n     * @return string\n     */\n    public function getApiUrl()\n    {\n        return $this->urlPrefix . $this->apiUrl;\n    }\n\n    /**\n     * Gets partners json\n     *\n     * @return array\n     */\n    public function getPartners()\n    {\n        $apiUrl = $this->getApiUrl();\n        try {\n            $this->getCurlClient()->post($apiUrl, []);\n            $this->getCurlClient()->setOptions(\n                [\n                    CURLOPT_REFERER => $this->getReferer()\n                ]\n            );\n            $response = json_decode($this->getCurlClient()->getBody(), true);\n            if ($response['partners']) {\n                $this->getCache()->savePartnersToCache($response['partners']);\n                return $response['partners'];\n            } else {\n                return $this->getCache()->loadPartnersFromCache();\n            }\n        } catch (\\Exception $e) {\n            return $this->getCache()->loadPartnersFromCache();\n        }\n    }\n\n    /**\n     * @return Curl\n     */\n    public function getCurlClient()\n    {\n        return $this->curlClient;\n    }\n\n    /**\n     * @return cache\n     */\n    public function getCache()\n    {\n        return $this->cache;\n    }\n\n    /**\n     * @return string\n     */\n    public function getReferer()\n    {\n        return \\Magento\\Framework\\App\\Request\\Http::getUrlNoScript($this->backendUrl->getBaseUrl())\n        . 'admin/marketplace/index/index';\n    }\n}\n")),(0,d.mdx)("p",null,"First off all the cURL client instance is created in ",(0,d.mdx)("inlineCode",{parentName:"p"},"__construct"),".\nMethod ",(0,d.mdx)("inlineCode",{parentName:"p"},"getPartners")," uses the cURL client makes POST request using cURL, the ",(0,d.mdx)("inlineCode",{parentName:"p"},"post")," method takes the first parameter the URL to the API of ",(0,d.mdx)("inlineCode",{parentName:"p"},"magento-connect"),", second parameter is empty array, then the option ",(0,d.mdx)("inlineCode",{parentName:"p"},"CURLOPT_REFERER")," added by ",(0,d.mdx)("inlineCode",{parentName:"p"},"setOptions")," method of the cURL client.\nAs result the script call ",(0,d.mdx)("inlineCode",{parentName:"p"},"getBody")," method of the cURL client."),(0,d.mdx)("h4",{id:"related-topics"},"Related topics"),(0,d.mdx)("p",null,(0,d.mdx)("a",{parentName:"p",href:"./gs-web-api-response.md"},"Status codes and responses")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-get-started-gs-curl-md-0ef6a66908dba81fc729.js.map