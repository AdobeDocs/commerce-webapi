{"version":3,"file":"component---src-pages-graphql-usage-index-md-433bc006a44c46c43d8c.js","mappings":"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","sources":["webpack://commerce-webapi/./src/pages/graphql/usage/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-webapi/commerce-webapi/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"run-graphql-queries-and-mutations\"\n    }}>{`Run Graphql queries and mutations`}</h1>\n    <h2 {...{\n      \"id\": \"queries\"\n    }}>{`Queries`}</h2>\n    <p>{`A GraphQL query retrieves data from the application server in a similar manner as a REST GET call. The current set of Adobe Commerce and Magento Open Source GraphQL queries allow a mobile app or browser to render a wide variety of information, including the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A set of products to be displayed. This can include the entire catalog or those that match customer-specified criteria.`}</li>\n      <li parentName=\"ul\">{`Customer data. With a customer token, a query can retrieve basic information about a customer as well as billing and shipping addresses, wish lists, order history, and other sensitive data.`}</li>\n      <li parentName=\"ul\">{`Shopping cart contents. GraphQL supports both guest and logged-in customer carts.`}</li>\n      <li parentName=\"ul\">{`Store configuration values, including theme and CMS settings, the currency code, and supported countries.`}</li>\n    </ul>\n    <p>{`The REST GET endpoints retrieve a wide variety of information on behalf of the merchant. Many of these endpoints are for retrieving backend information. For example, the `}<inlineCode parentName=\"p\">{`GET /V1/customers/search`}</inlineCode>{` endpoint can be used to find a subset of customers that meet certain criteria, such as those that live in a particular state or have a birthday this month. Likewise, the `}<inlineCode parentName=\"p\">{`GET /V1/invoices`}</inlineCode>{` endpoint can return all the recently-generated invoices. This type of functionality is not required for the frontend, so it is not available in GraphQL queries. The queries are designed to improve the customer's user experience by quickly retrieving the data needed to render pages.`}</p>\n    <p>{`Over time, the GraphQL queries will duplicate the functionality of all storefront-facing GET calls, while making it possible to query more data in one request. The main difference will be that GraphQL will support storefront use cases, while REST will support admin use cases.`}</p>\n    <h2 {...{\n      \"id\": \"structure-of-a-query\"\n    }}>{`Structure of a query`}</h2>\n    <p>{`A query contains the following elements:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The optional keyword `}<inlineCode parentName=\"li\">{`query`}</inlineCode>{`. If no keyword is specified at the beginning of a request, the processor assumes the request is a query.`}</li>\n      <li parentName=\"ul\">{`An operation name for your local implementation. This name is required if you include variables. Otherwise, it is optional.`}</li>\n      <li parentName=\"ul\">{`The query name`}</li>\n      <li parentName=\"ul\">{`The terms to search for. The terms can be in the form of objects, attributes, or a combination. Queries that don't require search terms obtain their context from the customer's authorization token or store ID, both of which are specified in the header of the call.`}</li>\n      <li parentName=\"ul\">{`The output object, which specifies which data the query returns.`}</li>\n    </ul>\n    <p>{`The following example shows the structure of the `}<inlineCode parentName=\"p\">{`cart`}</inlineCode>{` query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query myCartQuery{\n  cart(cart_id: String!): Cart\n}\n`}</code></pre>\n    <p>{`In the preceding example, `}<inlineCode parentName=\"p\">{`myCartQuery`}</inlineCode>{` identifies your implementation of the `}<inlineCode parentName=\"p\">{`cart`}</inlineCode>{` query. `}<inlineCode parentName=\"p\">{`cart_id`}</inlineCode>{` is a non-nullable string that defines the cart to query. (The exclamation point indicates the value is non-nullable.) The `}<inlineCode parentName=\"p\">{`Cart`}</inlineCode>{` output object defines which fields to return.`}</p>\n    <p>{`Now let's fully define a query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query myCartQuery{\n  cart(cart_id: \"1WxKm8WUm3uFKXLlHXezew5WREfVRPAn\") {\n    items {\n      id\n      quantity\n    }\n    billing_address {\n      firstname\n      lastname\n      postcode\n      }\n    shipping_addresses {\n      firstname\n      lastname\n      postcode\n    }\n  }\n}\n`}</code></pre>\n    <p>{`In this example, we've supplied a cart ID as input, (which was generated by the `}<inlineCode parentName=\"p\">{`createEmptyCart`}</inlineCode>{` mutation). The output includes the `}<inlineCode parentName=\"p\">{`cart_id`}</inlineCode>{` as well as selected information about the items in the cart and the billing and shipping addresses.`}</p>\n    <p>{`The following example shows the query response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"cart\": {\n      \"items\": [\n        {\n          \"id\": \"5\",\n          \"quantity\": 1\n        }\n      ],\n      \"billing_address\": {\n        \"firstname\": \"Veronica\",\n        \"lastname\": \"Costello\",\n        \"postcode\": \"49628-7978\"\n      },\n      \"shipping_addresses\": [\n        {\n          \"firstname\": \"Veronica\",\n          \"lastname\": \"Costello\",\n          \"postcode\": \"49628-7978\"\n        }\n      ]\n    }\n  }\n}\n`}</code></pre>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Adobe Commerce and Magento Open Source will not run a query that is too complex. The number of fields, objects, and nodes are factors in determining the complexity of a query.`}</p>\n    <h2 {...{\n      \"id\": \"query-variables\"\n    }}>{`Query variables`}</h2>\n    <p>{`Specifying variables in a query can help increase code re-use. Consider the following requirements when generating a query that contains one or more variables:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`All variables must be declared up-front, immediately after the operation name.`}</li>\n      <li parentName=\"ul\">{`Variables are typed: they can be scalar or an object.`}</li>\n      <li parentName=\"ul\">{`You must use all declared variables. Object variables are defined in JSON.`}</li>\n    </ul>\n    <p>{`The following example declares the `}<inlineCode parentName=\"p\">{`$cart_id`}</inlineCode>{` variable. It is referenced in the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` statement.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query myCartQueryWithVariable($cart_id: String!) {\n  cart(cart_id: $cart_id) {\n    items {\n      id\n      quantity\n    }\n    billing_address {\n      firstname\n      lastname\n      postcode\n    }\n    shipping_addresses {\n      firstname\n      lastname\n      postcode\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Variables are defined separately in JSON:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"cart_id\": \"1WxKm8WUm3uFKXLlHXezew5WREfVRPAn\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutations\"\n    }}>{`Mutations`}</h2>\n    <p>{`While GraphQL queries perform read operations, mutations change the data. A mutation can create, update, or delete objects and fields. In REST terminology, queries operate like `}<inlineCode parentName=\"p\">{`GET`}</inlineCode>{` requests, while mutations are similar to `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`PUT`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"structure-of-a-mutation\"\n    }}>{`Structure of a mutation`}</h3>\n    <p>{`A mutation contains the following elements:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The keyword `}<inlineCode parentName=\"li\">{`mutation`}</inlineCode></li>\n      <li parentName=\"ul\">{`An operation name for your local implementation. This name is required if you include variables. Otherwise, it is optional.`}</li>\n      <li parentName=\"ul\">{`The mutation name`}</li>\n      <li parentName=\"ul\">{`The input object or attributes. Most mutations require an input object that contains data or individual attributes for the application server to process. However, some mutations, such as `}<inlineCode parentName=\"li\">{`createEmptyCart`}</inlineCode>{`, do not require an input object. In this particular case, the authorization token passed with the request provides the needed context.`}</li>\n      <li parentName=\"ul\">{`The output object, which specifies which data the mutation returns.`}</li>\n    </ul>\n    <p>{`The following example shows the structure of the `}<inlineCode parentName=\"p\">{`createCustomer`}</inlineCode>{` mutation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`mutation myCreateCustomer {\n  createCustomer(\n    input: CustomerInput!\n  ) {\n    CustomerOutput\n  }\n}\n`}</code></pre>\n    <p>{`In this example, `}<inlineCode parentName=\"p\">{`myCreateCustomer`}</inlineCode>{` identifies your implementation.  `}<inlineCode parentName=\"p\">{`CustomerInput`}</inlineCode>{` is a non-nullable object that defines a customer. (The exclamation point indicates the value is non-nullable.) The `}<inlineCode parentName=\"p\">{`CustomerOutput`}</inlineCode>{` object defines which fields to return.`}</p>\n    <p>{`Now let's take a look at a fully-defined mutation. This time, we'll specify the minimum fields needed as input to create a customer (`}<inlineCode parentName=\"p\">{`firstname`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`lastname`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`password`}</inlineCode>{`). We could include the same fields in the output, but GraphQL allows you to return only the data you need, which is the customer `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`mutation myCreateCustomerNoVariables {\n  createCustomer(\n    input: {\n      firstname: \"Melanie\"\n      lastname: \"Shaw\"\n      email: \"mshaw@example.com\"\n      password: \"Password1\"\n    }\n  ) {\n    customer {\n      email\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The mutation returns the customer email:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"createCustomer\": {\n      \"customer\": {\n        \"email\" : \"mshaw@example.com\"\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mutation-input\"\n    }}>{`Mutation input`}</h3>\n    <p>{`A mutation can require either an object as input (as shown above) or one or more scalar values. When specifying an object, you must include the `}<inlineCode parentName=\"p\">{`input: {}`}</inlineCode>{` keyword. When the mutation requires scalar values, specify the field name and value, as shown below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`mutation myGenerateCustomerToken {\n  generateCustomerToken(\n    email: \"mshaw@example.com\"\n    password: \"Password1\"\n  ) {\n    token\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mutation-variables\"\n    }}>{`Mutation variables`}</h3>\n    <p>{`Specifying variables in a mutation can help increase code re-use. Consider the following requirements when generating a mutation that contains one or more variables:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`All variables must be declared up-front, immediately after the operation name.`}</li>\n      <li parentName=\"ul\">{`Variables are typed: they can be scalar or an object.`}</li>\n      <li parentName=\"ul\">{`You must use all declared variables. Object variables are defined in JSON.`}</li>\n    </ul>\n    <p>{`The following example declares the `}<inlineCode parentName=\"p\">{`$CustomerInput`}</inlineCode>{` variable. It is referenced in the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` statement.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`mutation myCreateCustomerWithVariables($CustomerInput: CustomerInput!) {\n  createCustomer(\n    input: $CustomerInput\n  ) {\n    customer {\n      email\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`$CustomerInput`}</inlineCode>{` variable is defined as a JSON object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"CustomerInput\": {\n    \"firstname\": \"Melanie\",\n    \"lastname\": \"Shaw\",\n    \"email\": \"mshaw@example.com\",\n    \"password\": \"Password1\"\n  }\n}\n`}</code></pre>\n    <p>{`This example updates the customer's email using two scalar variables (`}<inlineCode parentName=\"p\">{`$email`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`$password`}</inlineCode>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`mutation myUpdateCustomer($email: String!, $password: String!) {\n  updateCustomer(\n    input: {\n      email: $email\n      password: $password\n    }\n  ) {\n    customer {\n      email\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The variables are defined separately.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"email\": \"melanie.shaw@example.com\",\n  \"password\": \"Password1\"\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}