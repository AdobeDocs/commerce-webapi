{"version":3,"file":"component---src-pages-graphql-develop-functional-testing-md-2b4702046af51767c9d5.js","mappings":"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","sources":["webpack://commerce-webapi/./src/pages/graphql/develop/functional-testing.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-webapi/commerce-webapi/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"graphql-functional-testing\"\n    }}>{`GraphQL functional testing`}</h1>\n    <p>{`Adobe Commerce and Magento Open Source provide API functional tests that can verify extension points in GraphQL. These tests serve as an example for exposing new queries via GraphQL.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-new-graphql-functional-test\"\n    }}>{`Creating a new GraphQL functional test`}</h2>\n    <p>{`All GraphQL functional tests should be located in the `}<inlineCode parentName=\"p\">{`dev/tests/api-functional/testsuite/Magento/GraphQl/`}</inlineCode>{` directory and inherit from the generic test case `}<inlineCode parentName=\"p\">{`Magento\\\\TestFramework\\\\TestCase\\\\GraphQlAbstract`}</inlineCode>{`. It defines the `}<inlineCode parentName=\"p\">{`graphQlQuery()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`graphQlMutation()`}</inlineCode>{` methods, which should be used to perform Web API calls from tests.`}</p>\n    <p>{`The following test verifies that the schema returns the correct attribute type, given the `}<inlineCode parentName=\"p\">{`attribute_code`}</inlineCode>{` and corresponding `}<inlineCode parentName=\"p\">{`entity_type`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Magento\\\\GraphQl\\\\Catalog;\n\nuse Magento\\\\TestFramework\\\\TestCase\\\\GraphQlAbstract;\n\nclass ProductAttributeTypeTest extends GraphQlAbstract\n{\n    public function testAttributeTypeResolver()\n    {\n        $query\n            = <<<QUERY\n{\n  customAttributeMetadata(attributes:\n  [\n    {\n      attribute_code:\"description\",\n      entity_type:\"catalog_product\"\n    },\n    {\n      attribute_code:\"status\",\n      entity_type:\"catalog_product\"\n    },\n    {\n      attribute_code:\"special_price\",\n      entity_type:\"catalog_product\"\n    },\n    {\n      attribute_code:\"disable_auto_group_change\",\n      entity_type:\"customer\"\n    }\n    {\n      attribute_code:\"special_price\",\n      entity_type:\"Magento\\\\\\\\\\\\\\\\Catalog\\\\\\\\\\\\\\\\Api\\\\\\\\\\\\\\\\Data\\\\\\\\\\\\\\\\ProductInterface\"\n    }\n  ]\n  )\n  {\n    items\n    {\n      attribute_code\n      attribute_type\n      entity_type\n      input_type\n    }\n  }\n }\nQUERY;\n        $response = $this->graphQlQuery($query);\n        $expectedAttributeCodes = [\n            'description',\n            'status',\n            'special_price',\n            'disable_auto_group_change',\n            'special_price'\n        ];\n        $entityType = [\n            'catalog_product',\n            'catalog_product',\n            'catalog_product',\n            'customer',\n            \\\\Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface::class\n        ];\n        $attributeTypes = ['String', 'Int', 'Float','Boolean', 'Float'];\n        $inputTypes = ['textarea', 'select', 'price', 'boolean', 'price'];\n        $this->assertAttributeType($attributeTypes, $expectedAttributeCodes, $entityType, $inputTypes, $response);\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-default-graphqlquerytest\"\n    }}>{`Using the default GraphQlQueryTest`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\GraphQl\\\\TestModule\\\\GraphQlQueryTest.php`}</inlineCode>{` test case uses two test modules to determine whether the mechanisms for GraphQL extensibility work as expected. It illustrates best practices for extending an existing GraphQL endpoint.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TestModuleGraphQlQuery`}</inlineCode>{` - This bare-bones module defines a `}<inlineCode parentName=\"li\">{`testItem`}</inlineCode>{` endpoint with the queryable attributes `}<inlineCode parentName=\"li\">{`item_id`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{`. It's located at `}<inlineCode parentName=\"li\">{`<installdir>/dev/tests/api-functional/_files/TestModuleGraphQlQuery`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TestModuleGraphQlQueryExtension`}</inlineCode>{` - This module extends `}<inlineCode parentName=\"li\">{`TestModuleGraphQlQuery`}</inlineCode>{`, adding the `}<inlineCode parentName=\"li\">{`integer_list`}</inlineCode>{` extension attribute. It's located at `}<inlineCode parentName=\"li\">{`<installdir>/dev/tests/api-functional/_files/TestModuleGraphQlQueryExtension`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"creating-fixtures\"\n    }}>{`Creating fixtures`}</h2>\n    <p>{`Fixtures, which are part of the testing framework, prepare preconditions in the system for further testing. For example, when you test the ability to add a product to the shopping cart, the precondition is that a product must be available for testing.`}</p>\n    <p>{`A fixture consists of two files:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The fixture file, which defines the test`}</li>\n      <li parentName=\"ul\">{`A rollback file, which reverts the system to the state before the test was run`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Each fixture should have a corresponding rollback file.`}</p>\n    <p>{`Adobe Commerce and Magento Open Source provide fixtures in the `}<inlineCode parentName=\"p\">{`dev/tests/integration/testsuite/Magento/<ModuleName>/_files`}</inlineCode>{` directory. Use these fixtures whenever possible. When you create your own fixture, also create a proper rollback.`}</p>\n    <h3 {...{\n      \"id\": \"fixture-files\"\n    }}>{`Fixture files`}</h3>\n    <p>{`The following fixture creates a simple product with predefined attributes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse Magento\\\\Catalog\\\\Model\\\\ProductFactory;\nuse Magento\\\\TestFramework\\\\Helper\\\\Bootstrap;\nuse Magento\\\\Catalog\\\\Model\\\\ResourceModel\\\\Product as ProductResource;\n\n$productFactory = Bootstrap::getObjectManager()->get(ProductFactory::class);\n$product = $productFactory->create();\n$product->setTypeId(\\\\Magento\\\\Catalog\\\\Model\\\\Product\\\\Type::TYPE_VIRTUAL)\n    ->setId(21)\n    ->setAttributeSetId(4)\n    ->setWebsiteIds([1])\n    ->setName('Virtual Product')\n    ->setSku('virtual-product')\n    ->setPrice(10)\n    ->setTaxClassId(0)\n    ->setVisibility(\\\\Magento\\\\Catalog\\\\Model\\\\Product\\\\Visibility::VISIBILITY_BOTH)\n    ->setStatus(\\\\Magento\\\\Catalog\\\\Model\\\\Product\\\\Attribute\\\\Source\\\\Status::STATUS_ENABLED)\n    ->setStockData(\n        [\n            'qty' => 100,\n            'is_in_stock' => 1,\n            'manage_stock' => 1,\n        ]\n    );\n/** @var ProductResource $productResource */\n$productResource = Bootstrap::getObjectManager()->create(ProductResource::class);\n$productResource->save($product);\n`}</code></pre>\n    <p>{`To use this fixture in a test, add it to the test's annotation in the following manner:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    /**\n     * @magentoApiDataFixture Magento/Catalog/_files/product_virtual.php\n     */\n    public function testAddVirtualProductToShoppingCart()\n    {\n      // Test body\n    }\n`}</code></pre>\n    <p>{`You can also invoke multiple fixtures:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    /**\n     * @magentoApiDataFixture Magento/Checkout/_files/quote_with_simple_product_saved.php\n     * @magentoApiDataFixture Magento/Customer/_files/customer.php\n     */\n    public function testSetNewBillingAddressByRegisteredCustomer()\n    {\n      // Test body\n    }\n`}</code></pre>\n    <p>{`The specified fixtures will now execute on every test run.`}</p>\n    <h3 {...{\n      \"id\": \"rollback-files\"\n    }}>{`Rollback files`}</h3>\n    <p>{`Every fixture should have a rollback file. A rollback is a set of operations that remove changes introduced by the fixture from the system once the test is completed.`}</p>\n    <p>{`The rollback filename should correspond to the original fixture filename postfixed by `}<inlineCode parentName=\"p\">{`_rollback`}</inlineCode>{` keyword. For example, if the fixture file name is `}<inlineCode parentName=\"p\">{`virtual_product.php`}</inlineCode>{`, name the rollback file `}<inlineCode parentName=\"p\">{`virtual_product_rollback.php`}</inlineCode>{`.`}</p>\n    <p>{`The following fixture rollback removes the newly-created product from the database.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse Magento\\\\Catalog\\\\Api\\\\ProductRepositoryInterface;\nuse Magento\\\\Framework\\\\Exception\\\\NoSuchEntityException;\nuse Magento\\\\Framework\\\\Exception\\\\StateException;\nuse Magento\\\\TestFramework\\\\Helper\\\\Bootstrap;\n\n$registry = Bootstrap::getObjectManager()->get(\\\\Magento\\\\Framework\\\\Registry::class);\n\n$registry->unregister('isSecureArea');\n$registry->register('isSecureArea', true);\n\n$productRepository = Bootstrap::getObjectManager()\n    ->create(ProductRepositoryInterface::class);\n\ntry {\n    $product = $productRepository->get('virtual-product', false, null, true);\n    $productRepository->delete($product);\n} catch (NoSuchEntityException $exception) {\n    //Product already removed\n} catch (StateException $exception) {\n}\n\n$registry->unregister('isSecureArea');\n$registry->register('isSecureArea', false);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fixture-configs\"\n    }}>{`Fixture configs`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`@magentoConfigFixture`}</inlineCode>{` annotation to set a custom config value. It supports a `}<inlineCode parentName=\"p\">{`store`}</inlineCode>{` scope only.`}</p>\n    <h4 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * @magentoConfigFixture <store_code>_store <config_key> <config_value>\n */\n`}</code></pre>\n    <p>{`where`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<store_code>`}</inlineCode>{` - Store code. See the `}<inlineCode parentName=\"li\">{`store`}</inlineCode>{`.`}<inlineCode parentName=\"li\">{`code`}</inlineCode>{` database field value.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<config_key>`}</inlineCode>{` - Config key. See `}<inlineCode parentName=\"li\">{`core_config_data`}</inlineCode>{`.`}<inlineCode parentName=\"li\">{`path`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<config_value>`}</inlineCode>{` - Config value. See `}<inlineCode parentName=\"li\">{`core_config_data`}</inlineCode>{`.`}<inlineCode parentName=\"li\">{`value`}</inlineCode></li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><inlineCode parentName=\"p\">{`@magentoConfigFixture`}</inlineCode>{` does not require a roll-back.`}</p>\n    <h4 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example usage`}</h4>\n    <p>{`The following example sets a store-scoped value `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` for the config key `}<inlineCode parentName=\"p\">{`checkout/options/enable_agreements`}</inlineCode>{` for the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` store in the `}<inlineCode parentName=\"p\">{`GetActiveAgreement()`}</inlineCode>{` test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    /**\n     * @magentoConfigFixture default_store checkout/options/enable_agreements 1\n     */\n    public function testGetActiveAgreement()\n    {\n        ...\n    }\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`@magentoConfigFixture`}</inlineCode>{` performs the following action as a background process before test execution:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO \\`core_config_data\\` (scope\\`, \\`scope_id\\`, \\`path\\`, \\`value\\`)\nVALUES\n  ('stores', 1, 'checkout/options/enable_agreements', '1');\n`}</code></pre>\n    <p>{`The fixture automatically removes the `}<inlineCode parentName=\"p\">{`checkout/options/enable_agreements`}</inlineCode>{` config key from the database after the test has been completed.`}</p>\n    <h2 {...{\n      \"id\": \"defining-expected-exceptions\"\n    }}>{`Defining expected exceptions`}</h2>\n    <p>{`Your functional tests should include events that cause exceptions. Since your tests expect an exception to occur, set up your tests so that they elicit the proper responses. You can define expected exception messages either in:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The body of the test`}</li>\n      <li parentName=\"ul\">{`The test function annotation`}</li>\n    </ul>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`We recommend that you declare expected exceptions in the test method body, as declaring expected exceptions with annotations has been deprecated in PHPUnit 8. Existing tests that use annotations will have to be updated when Adobe Commerce or Magento Open Source require that version of PHPUnit or higher.`}</p>\n    <h3 {...{\n      \"id\": \"exception-messages-in-the-body-of-a-test\"\n    }}>{`Exception messages in the body of a test`}</h3>\n    <p>{`The following examples show two ways you can use the `}<inlineCode parentName=\"p\">{`expectExceptionMessage`}</inlineCode>{` function to define an expected exception message.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`public function testMyExceptionTest()\n{\n    ...\n\n    self::expectExceptionMessage(\"Expected exception message goes here...\");\n\n    ...\n}\n\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`public function testMyExceptionTest()\n{\n    ...\n\n    $this->expectExceptionMessage(\"Expected exception message goes here...\");\n\n    ...\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Define the exception message before invoking logic that generates the exception.`}</p>\n    <p>{`As an example, consider the case where Customer A tries to retrieve information about Customer B's cart. In this situation, Customer A gets this error:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`The current user cannot perform operations on cart \"XXXXX\"\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`XXXXX`}</inlineCode>{` is the unique ID of Customer B's cart.`}</p>\n    <p>{`The following sample shows how to cover this scenario using an `}<inlineCode parentName=\"p\">{`expectExceptionMessage`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    /**\n     * @magentoApiDataFixture Magento/Checkout/_files/quote_with_items_saved.php\n     */\n    public function testGetCartFromAnotherCustomer()\n    {\n        $reservedOrderId = 'test_order_item_with_items';\n        $this->quoteResource->load(\n            $this->quote,\n            $reservedOrderId,\n            'reserved_order_id'\n        );\n        $maskedQuoteId = $this->quoteIdToMaskedId->execute((int)$this->quote->getId());\n        $query = $this->prepareGetCartQuery($maskedQuoteId);\n        self::expectExceptionMessage(\"The current user cannot perform operations on cart \\\\\"$maskedQuoteId\\\\\"\");\n        $this->graphQlQuery($query);\n    }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exception-messages-in-the-annotation-of-a-test-function\"\n    }}>{`Exception messages in the annotation of a test function`}</h3>\n    <p>{`You can also use a predefined directive such as `}<inlineCode parentName=\"p\">{`@expectedExceptionMessage`}</inlineCode>{` as an alternative way to call the `}<inlineCode parentName=\"p\">{`expectExceptionMessage`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    /**\n     * @expectedException \\\\Exception\n     * @expectedExceptionMessage Expected exception message goes here...\n     */\n`}</code></pre>\n    <p>{`In the following query, a customer provides an incorrect cart ID while trying to retrieve information about his own cart.`}</p>\n    <p><strong parentName=\"p\">{`Query:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`{\n  cart(cart_id: \"YYYYY\") {\n    items {\n      __typename\n      id\n      qty\n    }\n  }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Result:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"errors\": [\n    {\n      \"message\": \"Could not find a cart with ID \\\\\"YYYYY\\\\\"\",\n      \"category\": \"graphql-no-such-entity\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\n        \"cart\"\n      ]\n    }\n  ],\n  \"data\": {\n    \"cart\": null\n  }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@expectExceptionMessage`}</inlineCode>{` annotation provides the text for the exception in this test.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    /**\n     * @expectedException \\\\Exception\n     * @expectedExceptionMessage Could not find a cart with ID \"non_existent_masked_id\"\n     */\n    public function testGetNonExistentCart()\n    {\n        $maskedQuoteId = 'non_existent_masked_id';\n        $query = $this->prepareGetCartQuery($maskedQuoteId);\n\n        $this->graphQlQuery($query);\n    }\n`}</code></pre>\n    <p>{`Use the following functions to cover expected exceptions:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`expectException`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`expectExceptionCode`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`expectExceptionMessage`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`expectExceptionMessageRegExp`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`expectExceptionObject`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"run-functional-tests\"\n    }}>{`Run functional tests`}</h2>\n    <h3 {...{\n      \"id\": \"configure-your-instance\"\n    }}>{`Configure your instance`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Change directories to `}<inlineCode parentName=\"p\">{`dev/tests/api-functional/`}</inlineCode>{` and copy the `}<inlineCode parentName=\"p\">{`phpunit_graphql.xml.dist`}</inlineCode>{` file to `}<inlineCode parentName=\"p\">{`phpunit_graphql.xml`}</inlineCode>{`.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`cp phpunit_graphql.xml.dist phpunit_graphql.xml\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Edit `}<inlineCode parentName=\"p\">{`phpunit_graphql.xml`}</inlineCode>{` to set values for the TESTS_BASE_URL, TESTS_WEBSERVICE_USER, TESTS_WEBSERVICE_APIKEY options:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`...\n<!-- Webserver URL -->\n<const name=\"TESTS_BASE_URL\" value=\"http://magento.url\"/>\n<!-- Webserver API user -->\n<const name=\"TESTS_WEBSERVICE_USER\" value=\"admin\"/>\n<!-- Webserver API key -->\n<const name=\"TESTS_WEBSERVICE_APIKEY\" value=\"123123q\"/>\n...\n`}</code></pre>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"run-all-tests-in-a-api-functional-test-suite\"\n    }}>{`Run all tests in a API functional test suite`}</h3>\n    <p><strong parentName=\"p\">{`Syntax:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml dev/tests/api-functional/testsuite/<Vendor>/<Module>/<TestFile>.php\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example:`}</strong></p>\n    <p>{`To run all tests from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.3.1/dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php\"\n      }}>{`dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php`}</a>{`, run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"run-a-single-test-in-a-api-functional-test-suite\"\n    }}>{`Run a single test in a API functional test suite`}</h3>\n    <p><strong parentName=\"p\">{`Syntax:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --filter <testFunctionName> dev/tests/api-functional/testsuite/<Vendor>/<Module>/<TestFile>.php\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example:`}</strong></p>\n    <p>{`To run `}<inlineCode parentName=\"p\">{`testGenerateCustomerValidToken`}</inlineCode>{` test from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.3.1/dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php\"\n      }}>{`dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php`}</a>{`, run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --filter testGenerateCustomerValidToken dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"run-a-selected-group-of-tests-in-an-api-functional-test-suite\"\n    }}>{`Run a selected group of tests in an API functional test suite`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`@group`}</inlineCode>{` directive in the test annotation to add the ability to run a group tests.`}</p>\n    <p><strong parentName=\"p\">{`Syntax:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --group <TEST_GROUP_ALIAS> dev/tests/api-functional/testsuite/<Vendor>/<Module>/<TestFile>.php\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example:`}</strong></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`testGetCartTotalsWithNoAddressSet`}</inlineCode>{` test is marked with `}<inlineCode parentName=\"p\">{`@group recent`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nnamespace Magento\\\\GraphQl;\n\nclass MyTest extends \\\\Magento\\\\TestFramework\\\\TestCase\\\\GraphQlAbstract\n\n    /**\n     * @group my_test_group\n     */\n    public function testFunction1()\n    {\n        ...\n    }\n\n    /**\n     * @group my_test_group\n     */\n    public function testFunction2()\n    {\n        ...\n    }\n\n    /**\n     *\n     */\n    public function testFunction3()\n    {\n        ...\n    }\n}\n`}</code></pre>\n    <p>{`To run the `}<inlineCode parentName=\"p\">{`testFunction1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`testFunction2`}</inlineCode>{` tests, which are part of the `}<inlineCode parentName=\"p\">{`my_test_group`}</inlineCode>{` group, use the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --group my_test_group dev/tests/api-functional/testsuite/Magento/GraphQl/MyTest.php\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}