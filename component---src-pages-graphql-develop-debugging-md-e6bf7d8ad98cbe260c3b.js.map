{"version":3,"file":"component---src-pages-graphql-develop-debugging-md-e6bf7d8ad98cbe260c3b.js","mappings":"mRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,6BAA2B,8BAEnC,4FACA,eACE,GAAM,sCAAoC,uCAE5C,2BAAY,cAAGC,WAAW,IACtB,KAAQ,qCAAmC,kBACpB,qPAED,uBAAYA,WAAW,KAAG,kCAAgD,gIAEpG,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,wEAGhC,uIACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,uCAGhC,+NACA,eACE,GAAM,kBAAgB,mBAExB,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,uBAAqB,6BAEjC,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,iBAAe,wBAKjC,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-webapi/./src/pages/graphql/develop/debugging.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-webapi/commerce-webapi/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"debugging-graphql-queries\"\n    }}>{`Debugging GraphQL queries`}</h1>\n    <p>{`This topic provides recommendations on how to debug GraphQL requests.`}</p>\n    <h2 {...{\n      \"id\": \"debugging-with-phpstorm-and-xdebug\"\n    }}>{`Debugging with PHPStorm and Xdebug`}</h2>\n    <p>{`When `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md#how-to-access-graphql\"\n      }}>{`using GraphiQL`}</a>{` or any other client for testing GraphQL queries, you might need to debug the request processing.\nYou can use Xdebug for debugging the PHP execution of a GraphQL query just as you would for other HTTP requests.\nTo start debugging, add the `}<inlineCode parentName=\"p\">{`?XDEBUG_SESSION_START=PHPSTORM`}</inlineCode>{` parameter to the endpoint URL.\nThe following example shows how to establish a connection between Xdebug and PHPStorm IDE.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-http\"\n      }}>{`http://<magento2-3-server>/graphql?XDEBUG_SESSION_START=PHPSTORM\n`}</code></pre>\n    <p>{`You can also enable an Xdebug connection for a particular request by setting the corresponding header parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`Cookie: XDEBUG_SESSION=PHPSTORM\n`}</code></pre>\n    <p>{`As a result, Xdebug within the PHP execution attempts to make a connection to an IDE. If the IDE is listening, it will give the instructions to Xdebug about breakpoints and other relevant information.`}</p>\n    <h2 {...{\n      \"id\": \"related-topics\"\n    }}>{`Related Topics`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../usage/headers.md\"\n        }}>{`GraphQL request headers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exceptions.md\"\n        }}>{`Exception handling`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}