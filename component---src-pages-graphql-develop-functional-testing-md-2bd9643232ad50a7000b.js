"use strict";(self.webpackChunkcommerce_webapi=self.webpackChunkcommerce_webapi||[]).push([[9377],{49487:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return p},default:function(){return c}});var a=n(58168),i=n(80045),s=(n(88763),n(15680)),o=n(83407);const r=["components"],p={},l=(d="InlineAlert",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)});var d;const u={_frontmatter:p},m=o.A;function c(e){let{components:t}=e,n=(0,i.A)(e,r);return(0,s.mdx)(m,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"graphql-functional-testing"},"GraphQL functional testing"),(0,s.mdx)("p",null,"Adobe Commerce and Magento Open Source provide API functional tests that can verify extension points in GraphQL. These tests serve as an example for exposing new queries via GraphQL."),(0,s.mdx)("h2",{id:"creating-a-new-graphql-functional-test"},"Creating a new GraphQL functional test"),(0,s.mdx)("p",null,"All GraphQL functional tests should be located in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"dev/tests/api-functional/testsuite/Magento/GraphQl/")," directory and inherit from the generic test case ",(0,s.mdx)("inlineCode",{parentName:"p"},"Magento\\TestFramework\\TestCase\\GraphQlAbstract"),". It defines the ",(0,s.mdx)("inlineCode",{parentName:"p"},"graphQlQuery()")," and ",(0,s.mdx)("inlineCode",{parentName:"p"},"graphQlMutation()")," methods, which should be used to perform Web API calls from tests."),(0,s.mdx)("p",null,"The following test verifies that the schema returns the correct attribute type, given the ",(0,s.mdx)("inlineCode",{parentName:"p"},"attribute_code")," and corresponding ",(0,s.mdx)("inlineCode",{parentName:"p"},"entity_type"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"namespace Magento\\GraphQl\\Catalog;\n\nuse Magento\\TestFramework\\TestCase\\GraphQlAbstract;\n\nclass ProductAttributeTypeTest extends GraphQlAbstract\n{\n    public function testAttributeTypeResolver()\n    {\n        $query\n            = <<<QUERY\n{\n  customAttributeMetadata(attributes:\n  [\n    {\n      attribute_code:\"description\",\n      entity_type:\"catalog_product\"\n    },\n    {\n      attribute_code:\"status\",\n      entity_type:\"catalog_product\"\n    },\n    {\n      attribute_code:\"special_price\",\n      entity_type:\"catalog_product\"\n    },\n    {\n      attribute_code:\"disable_auto_group_change\",\n      entity_type:\"customer\"\n    }\n    {\n      attribute_code:\"special_price\",\n      entity_type:\"Magento\\\\\\\\Catalog\\\\\\\\Api\\\\\\\\Data\\\\\\\\ProductInterface\"\n    }\n  ]\n  )\n  {\n    items\n    {\n      attribute_code\n      attribute_type\n      entity_type\n      input_type\n    }\n  }\n }\nQUERY;\n        $response = $this->graphQlQuery($query);\n        $expectedAttributeCodes = [\n            'description',\n            'status',\n            'special_price',\n            'disable_auto_group_change',\n            'special_price'\n        ];\n        $entityType = [\n            'catalog_product',\n            'catalog_product',\n            'catalog_product',\n            'customer',\n            \\Magento\\Catalog\\Api\\Data\\ProductInterface::class\n        ];\n        $attributeTypes = ['String', 'Int', 'Float','Boolean', 'Float'];\n        $inputTypes = ['textarea', 'select', 'price', 'boolean', 'price'];\n        $this->assertAttributeType($attributeTypes, $expectedAttributeCodes, $entityType, $inputTypes, $response);\n    }\n")),(0,s.mdx)("h2",{id:"using-the-default-graphqlquerytest"},"Using the default GraphQlQueryTest"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"\\Magento\\GraphQl\\TestModule\\GraphQlQueryTest.php")," test case uses two test modules to determine whether the mechanisms for GraphQL extensibility work as expected. It illustrates best practices for extending an existing GraphQL endpoint."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"TestModuleGraphQlQuery")," - This bare-bones module defines a ",(0,s.mdx)("inlineCode",{parentName:"li"},"testItem")," endpoint with the queryable attributes ",(0,s.mdx)("inlineCode",{parentName:"li"},"item_id")," and ",(0,s.mdx)("inlineCode",{parentName:"li"},"name"),". It's located at ",(0,s.mdx)("inlineCode",{parentName:"li"},"<installdir>/dev/tests/api-functional/_files/TestModuleGraphQlQuery"),"."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"TestModuleGraphQlQueryExtension")," - This module extends ",(0,s.mdx)("inlineCode",{parentName:"li"},"TestModuleGraphQlQuery"),", adding the ",(0,s.mdx)("inlineCode",{parentName:"li"},"integer_list")," extension attribute. It's located at ",(0,s.mdx)("inlineCode",{parentName:"li"},"<installdir>/dev/tests/api-functional/_files/TestModuleGraphQlQueryExtension"),".")),(0,s.mdx)("h2",{id:"data-and-config-fixtures"},"Data and config fixtures"),(0,s.mdx)(l,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,"Fixture and rollback files are deprecated and should not be used for new WebAPI tests. All new WebAPI tests should use data and config fixtures classes."),(0,s.mdx)("p",null,"To execute your tests, you often need to populate some data in your testing environment or set up particular config settings. Use data fixtures to create objects and config fixtures to define configuration settings."),(0,s.mdx)("p",null,"Data fixtures are special classes that allow you to create one or more instances of objects, such as ",(0,s.mdx)("inlineCode",{parentName:"p"},"Customer"),", ",(0,s.mdx)("inlineCode",{parentName:"p"},"Cart")," or ",(0,s.mdx)("inlineCode",{parentName:"p"},"Product"),". ",(0,s.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/testing/guide/integration/attributes/data-fixture/"},"Data fixture attribute")," in the ",(0,s.mdx)("em",{parentName:"p"},"Application Testing Guide")," describes how to create and use data fixtures in your WebAPI tests."),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/testing/guide/integration/attributes/config-fixture/"},"Configuration fixture attribute")," describes config fixtures."),(0,s.mdx)("h2",{id:"defining-expected-exceptions"},"Defining expected exceptions"),(0,s.mdx)("p",null,"Your functional tests should include events that cause exceptions. Since your tests expect an exception to occur, set up your tests so that they elicit the proper responses. You can define expected exception messages either in:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"The body of the test"),(0,s.mdx)("li",{parentName:"ul"},"The test function annotation")),(0,s.mdx)(l,{variant:"success",slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,"We recommend that you declare expected exceptions in the test method body, as declaring expected exceptions with annotations has been deprecated in PHPUnit 8. Existing tests that use annotations will have to be updated when Adobe Commerce or Magento Open Source require that version of PHPUnit or higher."),(0,s.mdx)("h3",{id:"exception-messages-in-the-body-of-a-test"},"Exception messages in the body of a test"),(0,s.mdx)("p",null,"The following examples show two ways you can use the ",(0,s.mdx)("inlineCode",{parentName:"p"},"expectExceptionMessage")," function to define an expected exception message."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},'public function testMyExceptionTest()\n{\n    ...\n\n    self::expectExceptionMessage("Expected exception message goes here...");\n\n    ...\n}\n\n')),(0,s.mdx)("p",null,"or"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},'public function testMyExceptionTest()\n{\n    ...\n\n    $this->expectExceptionMessage("Expected exception message goes here...");\n\n    ...\n}\n')),(0,s.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,"Define the exception message before invoking logic that generates the exception."),(0,s.mdx)("p",null,"As an example, consider the case where Customer A tries to retrieve information about Customer B's cart. In this situation, Customer A gets this error:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-terminal"},'The current user cannot perform operations on cart "XXXXX"\n')),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"XXXXX")," is the unique ID of Customer B's cart."),(0,s.mdx)("p",null,"The following sample shows how to cover this scenario using an ",(0,s.mdx)("inlineCode",{parentName:"p"},"expectExceptionMessage")," function:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"    /**\n     * @magentoApiDataFixture Magento/Checkout/_files/quote_with_items_saved.php\n     */\n    public function testGetCartFromAnotherCustomer()\n    {\n        $reservedOrderId = 'test_order_item_with_items';\n        $this->quoteResource->load(\n            $this->quote,\n            $reservedOrderId,\n            'reserved_order_id'\n        );\n        $maskedQuoteId = $this->quoteIdToMaskedId->execute((int)$this->quote->getId());\n        $query = $this->prepareGetCartQuery($maskedQuoteId);\n        self::expectExceptionMessage(\"The current user cannot perform operations on cart \\\"$maskedQuoteId\\\"\");\n        $this->graphQlQuery($query);\n    }\n")),(0,s.mdx)("h3",{id:"exception-messages-in-the-annotation-of-a-test-function"},"Exception messages in the annotation of a test function"),(0,s.mdx)("p",null,"You can also use a predefined directive such as ",(0,s.mdx)("inlineCode",{parentName:"p"},"@expectedExceptionMessage")," as an alternative way to call the ",(0,s.mdx)("inlineCode",{parentName:"p"},"expectExceptionMessage")," method:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"    /**\n     * @expectedException \\Exception\n     * @expectedExceptionMessage Expected exception message goes here...\n     */\n")),(0,s.mdx)("p",null,"In the following query, a customer provides an incorrect cart ID while trying to retrieve information about his own cart."),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Query:")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-text"},'{\n  cart(cart_id: "YYYYY") {\n    items {\n      __typename\n      id\n      qty\n    }\n  }\n}\n')),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Result:")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "errors": [\n    {\n      "message": "Could not find a cart with ID \\"YYYYY\\"",\n      "category": "graphql-no-such-entity",\n      "locations": [\n        {\n          "line": 2,\n          "column": 3\n        }\n      ],\n      "path": [\n        "cart"\n      ]\n    }\n  ],\n  "data": {\n    "cart": null\n  }\n}\n')),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"@expectExceptionMessage")," annotation provides the text for the exception in this test."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"    /**\n     * @expectedException \\Exception\n     * @expectedExceptionMessage Could not find a cart with ID \"non_existent_masked_id\"\n     */\n    public function testGetNonExistentCart()\n    {\n        $maskedQuoteId = 'non_existent_masked_id';\n        $query = $this->prepareGetCartQuery($maskedQuoteId);\n\n        $this->graphQlQuery($query);\n    }\n")),(0,s.mdx)("p",null,"Use the following functions to cover expected exceptions:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"expectException")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"expectExceptionCode")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"expectExceptionMessage")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"expectExceptionMessageRegExp")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"expectExceptionObject"))),(0,s.mdx)("h2",{id:"run-functional-tests"},"Run functional tests"),(0,s.mdx)("h3",{id:"configure-your-instance"},"Configure your instance"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Change directories to ",(0,s.mdx)("inlineCode",{parentName:"p"},"dev/tests/api-functional/")," and copy the ",(0,s.mdx)("inlineCode",{parentName:"p"},"phpunit_graphql.xml.dist")," file to ",(0,s.mdx)("inlineCode",{parentName:"p"},"phpunit_graphql.xml"),"."),(0,s.mdx)("pre",{parentName:"li"},(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"cp phpunit_graphql.xml.dist phpunit_graphql.xml\n"))),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Edit ",(0,s.mdx)("inlineCode",{parentName:"p"},"phpunit_graphql.xml")," to set values for the TESTS_BASE_URL, TESTS_WEBSERVICE_USER, TESTS_WEBSERVICE_APIKEY options:"),(0,s.mdx)("pre",{parentName:"li"},(0,s.mdx)("code",{parentName:"pre",className:"language-xml"},'...\n\x3c!-- Webserver URL --\x3e\n<const name="TESTS_BASE_URL" value="http://magento.url"/>\n\x3c!-- Webserver API user --\x3e\n<const name="TESTS_WEBSERVICE_USER" value="admin"/>\n\x3c!-- Webserver API key --\x3e\n<const name="TESTS_WEBSERVICE_APIKEY" value="123123q"/>\n...\n')))),(0,s.mdx)("h3",{id:"run-all-tests-in-a-api-functional-test-suite"},"Run all tests in a API functional test suite"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax:")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml dev/tests/api-functional/testsuite/<Vendor>/<Module>/<TestFile>.php\n")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example:")),(0,s.mdx)("p",null,"To run all tests from ",(0,s.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.3.1/dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php"},"dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php"),", run the following command:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php\n")),(0,s.mdx)("h3",{id:"run-a-single-test-in-a-api-functional-test-suite"},"Run a single test in a API functional test suite"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax:")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --filter <testFunctionName> dev/tests/api-functional/testsuite/<Vendor>/<Module>/<TestFile>.php\n")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example:")),(0,s.mdx)("p",null,"To run ",(0,s.mdx)("inlineCode",{parentName:"p"},"testGenerateCustomerValidToken")," test from ",(0,s.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.3.1/dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php"},"dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php"),", run the following command:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --filter testGenerateCustomerValidToken dev/tests/api-functional/testsuite/Magento/GraphQl/Customer/GenerateCustomerTokenTest.php\n")),(0,s.mdx)("h3",{id:"run-a-selected-group-of-tests-in-an-api-functional-test-suite"},"Run a selected group of tests in an API functional test suite"),(0,s.mdx)("p",null,"Use the ",(0,s.mdx)("inlineCode",{parentName:"p"},"@group")," directive in the test annotation to add the ability to run a group tests."),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax:")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --group <TEST_GROUP_ALIAS> dev/tests/api-functional/testsuite/<Vendor>/<Module>/<TestFile>.php\n")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example:")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"testGetCartTotalsWithNoAddressSet")," test is marked with ",(0,s.mdx)("inlineCode",{parentName:"p"},"@group recent"),":"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Magento\\GraphQl;\n\nclass MyTest extends \\Magento\\TestFramework\\TestCase\\GraphQlAbstract\n\n    /**\n     * @group my_test_group\n     */\n    public function testFunction1()\n    {\n        ...\n    }\n\n    /**\n     * @group my_test_group\n     */\n    public function testFunction2()\n    {\n        ...\n    }\n\n    /**\n     *\n     */\n    public function testFunction3()\n    {\n        ...\n    }\n}\n")),(0,s.mdx)("p",null,"To run the ",(0,s.mdx)("inlineCode",{parentName:"p"},"testFunction1")," and ",(0,s.mdx)("inlineCode",{parentName:"p"},"testFunction2")," tests, which are part of the ",(0,s.mdx)("inlineCode",{parentName:"p"},"my_test_group")," group, use the following command:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/phpunit -c dev/tests/api-functional/phpunit_graphql.xml --group my_test_group dev/tests/api-functional/testsuite/Magento/GraphQl/MyTest.php\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-graphql-develop-functional-testing-md-2bd9643232ad50a7000b.js.map